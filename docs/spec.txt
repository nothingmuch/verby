---------------------------------------------------------------------
EERS Projects Creator/Installer
---------------------------------------------------------------------

We are a sub-contractor, our client is a HR (Human Resources) 
consultancy which sells various products and services to many 
corporate clients one of which is the EERS system. EERS stands for 
"Employee Engagement Reporting System". It is a data-reporting 
application which allows an employeer to guage the overall satisfaction
of their employees based on employee survey data. The employeer can 
run reports which are filtered by various sets of employee demographics
(age, gender, location, etc). 

The EERS system has a base feature set, which we have implemented as
a perl framework called EERS (its a top-level namespace basically).
For each specific project, the EERS framework is "subclassed". This 
allows for us to easily hack on project specific customizations 
without needing to touch our base framework. 

Each project has it's own specific set of data, which includes the 
employee survey data as well as project specific demographics. While
the perl code can be subclassed, the data and configuration set up 
are not so easy. The goal of this installer/creator is to automate
the process of setting up a new project, which includes setting up 
databases and folders within SVN repositories, etc.

---------------------------------------------------------------------

The installer should be interactive by default (although it should
go through great pains to not ask questions). However there should
be a non-interactive option, but this will also be a stricter
option, meaning if it would need to ask a question, it will die()

It would be ideal if the installer could be resumable too, like 
'make' is. This does not have to be overly complex, maybe just a log 
file which can be read to see which step we are on. However, is is a 
"nice to have" feature, and not a "need to have".

The installer will be distributed as a tarball so that we can easily
move it and all the dependent files around. Ideally the install 
process would be something like this:

    tar zxvf installer.tar.gz
    cd installer/
    perl install.pl --conf path/to/conf.file --data data_files/

Here is the config info needed for the installer:

- The <project> name
- The URL of the SVN repository 
- list of the Demographics mapped to table names/ids

Here are the files the installed needs:

- a set of .csv/.txt datafiles
- an organization.tree file

Here are the template files:

- conf/httpd.conf
- conf/startup.pl
- conf/startup.xml
- perl/<client-name>/main.pm
- data/demographic_tables.sql
- data/report_tables.sql
- some misc. test files

Things which need to be in place before the installer runs:

- apache installed
- mod_perl installed
- mysql installed
- several perl modules installed

Here are the steps I need this installer to take:

- make sure all the .csv/.txt files use \n and not \r\n

    We need to do this because it will be coming from Windows sometimes 
    and MySQL will be expecting only \n
    
- find the organization.tree file and make a lkup_org.txt file out of it

    This should also test the organization.tree file with Tree::Parser 
    to make sure it can be read correctly.

- analyze the .csv/.txt files. 

    Find all the standard tables, then find all the demographics tables
    listed in the config. Then check for survey results tables and 
    engagement score tables.
    
    Account for all the tables, if we have files left over, or missing
    then the script should die() and list those missing/extra tables.
    
- set up the <project> directory

    - cd to /var/www/, create it if it does not exist.
    
    - Look for a perl/ and EERS/ directory and create if they do not exist.
    
        You will need to check these directories out of the repository to create
        them. On the dev server they will usually be there though.
    
    - create the following directory structure and files in /var/www/:
    
        <project>/
            conf/
                httpd.conf                    <-- created from a template
                startup.pl                    <-- created from a template
                startup.xml                   <-- created from a template
            htdocs/
                static/                       <-- copies set of default files
                images/                       <-- copies set of default files
                javascript/                   <-- copies set of default files
                css/                          <-- copies set of default files
            csvdocs/
            database/
                admin_tables.sql
                log_tables.sql
                reports_tables.sql            <-- created from a template
                demographics_tables.sql       <-- created from a template
                data/                         <-- all the .csv/.txt files go in here
            perl/
                <project>/
                    main.pm                   <-- created from a template
            tests/
                001_<project>_load_test.t     <-- created from a template 
                002_<project>_org_tree_test.t <-- created from a template
                003_<project>_registry_test.t <-- created from a template
    
    - run the test suite (it should all pass)
    
        This may be in the process too early right now. The only thing which might
        fail would be the registry test. But we can deal with that later.
    
- Import the data into MySQL. 

    It should have a <project> user created already as well as <project> database.
    
    If the <project> database is not created, then we can create one. If it has been
    created, check to see if it has tables already. If it has some tables in it, then
    either prompt to delete them or if non-interactive, then die().
    
    Then we need to add all of the .sql files in database/ into the database. If we
    have an error, then we should die() with the error details.
    
    Check that all the tables we expect have been created, and die() if they have not been.
    
- create the <project> directory in the SVN repository

    We use a trunk/ tags/ branches/ structure for the repo. Each <project> gets
    their own directory in the repo. The base library and company framework is 
    tagged when this is done as well (so we can track changes better).    
    
    Import the contents of /var/www/<project> into the repo.

---------------------------------------------------------------------

At this point everything should be done. We have a script which starts an apache instance
for the given httpd.conf. But i would want that to be done manually. We may need to include
some kind of logic though for managing port numbers since each apache instance (and Httpd.conf) 
will need its own port. But thats details for later :)

